<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Data.SqlClient" #>
<#@ include file=".\ConfigurationAccessor.ttinclude" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ComponentModel;

namespace NGL.Web.Data.Entities
{
<# 
var config = new ConfigurationAccessor((IServiceProvider)this.Host);
string connectionString = config.ConnectionStrings["DefaultConnection"].ConnectionString;

using (var connection = new SqlConnection(connectionString))
{
	var descriptorTables = new List<string>();

	connection.Open();
    var tableQuery = new SqlCommand("select * from INFORMATION_SCHEMA.TABLES where TABLE_NAME like '%Descriptor' and TABLE_NAME not in ('Descriptor', 'CredentialFieldDescriptor', 'AccountCodeDescriptor', 'LevelDescriptor', 'ServiceDescriptor', 'AssessmentPeriodDescriptor')", connection);
	using (var tableReader = tableQuery.ExecuteReader())
	{
		if (tableReader.HasRows)
		{
			while (tableReader.Read())
			{
				var tableName = tableReader["table_name"].ToString();
				descriptorTables.Add(tableName);
			}
		}
	}

	foreach (var descriptorTable in descriptorTables)
	{
		var typeTableQuery = @"SELECT OBJECT_NAME(f.referenced_object_id) TableName, COL_NAME(fc.parent_object_id,fc.parent_column_id) ColName 
FROM sys.foreign_keys AS f
INNER JOIN sys.foreign_key_columns AS fc ON f.OBJECT_ID = fc.constraint_object_id
INNER JOIN sys.tables t ON t.OBJECT_ID = fc.referenced_object_id
WHERE OBJECT_NAME (f.parent_object_id) = '" + descriptorTable + "' and OBJECT_NAME(f.referenced_object_id) like '%Type'";


        var tableName = string.Empty;
        var typeForeignKey = string.Empty;

        var typeTable = new SqlCommand(typeTableQuery, connection);
        using (var typeTableReader = typeTable.ExecuteReader())
        {
            if (typeTableReader.HasRows)
            {
                while (typeTableReader.Read())
                {
                    tableName = typeTableReader["TableName"].ToString();
                    typeForeignKey = typeTableReader["ColName"].ToString();
                }
            }
        }

		var query = string.Format("select edfi.{0}.{0}Id, edfi.{1}.{2} TypeId, edfi.{1}.ShortDescription from edfi.{0} inner join edfi.{1} on {0}.{2} = {1}.{2}", descriptorTable, tableName, typeForeignKey);
		var descriptorQuery = new SqlCommand(query, connection);
		using (var descriptorTypeReader = descriptorQuery.ExecuteReader())
		{
			if (descriptorTypeReader.HasRows)
			{
#>

	public enum <#= descriptorTable #>Enum
	{
<#
				var keyList = new List<int>();
				while (descriptorTypeReader.Read())
				{
					var id = descriptorTypeReader[0].ToString().Trim();
					var key = (int)descriptorTypeReader[1];
					if(keyList.Contains(key))
						continue;
					
					keyList.Add(key);

					var description = descriptorTypeReader[2].ToString();
					var memberName = description
							.Replace(" ", "")
							.Replace("/", "")
							.Replace(",", "")
							.Replace("(", "_")
							.Replace(")", "")
							.Replace("'", "")
							.Replace(".", "")
							.Replace("%", "Percentage")
							.Replace("-", "");
										
					if (char.IsDigit(memberName[0]))
						memberName = "_" + memberName;

#>
		[Description("<#= description #>")]
		<#= memberName #> = <#= id #>,                               
<#
				}
#>	}
<#
			}
		}
	}
}

#>
}